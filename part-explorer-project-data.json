{
  "project_overview": {
    "name": "SljivaStore",
    "description": "NFT marketplace for fractionalized NFT parts trading",
    "stack": "Node.js + Express + MongoDB + SvelteKit + Docker",
    "architecture": "Microservices with separate frontend/backend containers"
  },
  "tech_stack": {
    "backend": {
      "runtime": "Node.js 18",
      "framework": "Express 5.1.0",
      "database": "MongoDB 7",
      "dependencies": {
        "cors": "^2.8.5",
        "dotenv": "^17.2.1",
        "ethers": "^6.15.0",
        "express": "^5.1.0",
        "mongodb": "^6.17.0",
        "multer": "^2.0.1"
      },
      "devDependencies": {
        "nodemon": "^3.1.10"
      }
    },
    "frontend": {
      "framework": "SvelteKit 2.31.1",
      "build_tool": "Vite 6.3.5",
      "styling": "TailwindCSS 4.0.0",
      "typescript": true,
      "dependencies": {
        "@noble/hashes": "^1.3.2",
        "@scure/bip32": "^1.3.1",
        "@scure/bip39": "^1.2.2",
        "@solana/web3.js": "^1.95.3",
        "bip39": "^3.1.0",
        "buffer": "^6.0.3",
        "ed25519-hd-key": "^1.3.0",
        "ethers": "^6.14.4"
      },
      "devDependencies": {
        "@sveltejs/adapter-node": "^5.3.1",
        "@sveltejs/adapter-static": "^3.0.9",
        "@sveltejs/kit": "^2.31.1",
        "@sveltejs/vite-plugin-svelte": "^5.0.0",
        "@tailwindcss/forms": "^0.5.9",
        "@tailwindcss/typography": "^0.5.15",
        "@tailwindcss/vite": "^4.0.0",
        "svelte": "^5.38.1",
        "svelte-check": "^4.0.0",
        "tailwindcss": "^4.0.0",
        "typescript": "^5.0.0",
        "vite": "^6.3.5"
      }
    }
  },
  "database_schema": {
    "collections": {
      "nfts": {
        "description": "Main NFT metadata",
        "fields": {
          "_id": "string (hash-based)",
          "name": "string",
          "description": "string",
          "creator": "string (ETH address)",
          "imageurl": "string",
          "imagehash": "string",
          "time_created": "Date",
          "part_count": "number",
          "status": "string (ACTIVE/DELETED)"
        },
        "indexes": ["creator"]
      },
      "parts": {
        "description": "Individual NFT parts",
        "fields": {
          "_id": "string (format: nftId:partNumber)",
          "part_no": "number",
          "parent_hash": "string (NFT ID)",
          "owner": "string (ETH address)",
          "listing": "string|null (listing ID)",
          "reservation": "string|null (reservation ID)"
        },
        "indexes": [
          "parent_hash",
          "owner", 
          "listing",
          "parent_hash + owner (compound)"
        ]
      },
      "listings": {
        "description": "Marketplace listings",
        "fields": {
          "_id": "ObjectId",
          "price": "string",
          "nftId": "string",
          "seller": "string (ETH address)",
          "quantity": "number",
          "sellerWallets": "object",
          "type": "string (PARTIAL/BUNDLE)",
          "status": "string (ACTIVE/DELETED)",
          "time_created": "Date",
          "time_updated": "Date"
        },
        "indexes": ["status"]
      },
      "reservations": {
        "description": "Temporary part reservations",
        "fields": {
          "_id": "ObjectId",
          "listingId": "ObjectId",
          "reserver": "string (ETH address)",
          "quantity": "number",
          "currency": "string",
          "buyerWallet": "string",
          "sellerWallet": "string",
          "totalPriceCrypto": "object",
          "timestamp": "Date"
        },
        "indexes": ["listingId"]
      },
      "transactions": {
        "description": "Completed transactions",
        "fields": {
          "_id": "ObjectId",
          "listingId": "string",
          "reservationId": "string",
          "buyer": "string (ETH address)",
          "seller": "string (ETH address)",
          "nftId": "string",
          "quantity": "number",
          "chainTx": "string",
          "currency": "string",
          "amount": "string",
          "timestamp": "Date"
        }
      },
      "partialtransactions": {
        "description": "Individual part transaction records",
        "fields": {
          "part": "string (part ID)",
          "txId": "string",
          "from": "string (ETH address)",
          "to": "string (ETH address)",
          "nftId": "string",
          "transaction": "string",
          "chainTx": "string",
          "currency": "string",
          "amount": "string",
          "timestamp": "Date"
        },
        "indexes": ["part"]
      },
      "used_signatures": {
        "description": "Replay attack prevention",
        "fields": {
          "signatureHash": "string",
          "signature": "string",
          "timestamp": "Date",
          "address": "string"
        }
      }
    }
  },
  "api_endpoints": {
    "nfts": {
      "GET /api/nfts": "Get all NFTs",
      "GET /api/nfts/creator/:address": "Get NFTs by creator",
      "GET /api/nfts/owner/:address": "Get NFTs by owner with counts",
      "GET /api/nfts/:id": "Get NFT by ID",
      "GET /api/nfts/:id/parts": "Get parts for NFT (paginated)",
      "POST /api/nfts/mint": "Mint new NFT (admin only)"
    },
    "parts": {
      "GET /api/parts/:id": "Get part by ID",
      "GET /api/parts/owner/:address": "Get parts by owner (paginated)",
      "GET /api/parts/listing/:listingId": "Get parts by listing (paginated)"
    },
    "listings": {
      "GET /api/listings": "Get active listings",
      "POST /api/listings": "Create listing",
      "DELETE /api/listings/:id": "Delete listing"
    },
    "transactions": {
      "POST /api/transactions": "Create transaction",
      "GET /api/transactions/partial/:partHash": "Get transaction history for part"
    },
    "reservations": {
      "POST /api/reservations": "Create reservation",
      "GET /api/reservations": "Get reservations"
    },
    "gifts": {
      "POST /api/gifts": "Create gift",
      "GET /api/gifts": "Get gifts"
    },
    "admins": {
      "GET /api/admins": "Get admin addresses"
    }
  },
  "authentication": {
    "method": "Ethereum signature verification",
    "implementation": "verifySignature middleware",
    "process": [
      "Client signs timestamp + data with Ethereum wallet",
      "Server verifies signature matches claimed address",
      "Server checks timestamp freshness (5 min tolerance)",
      "Server prevents replay attacks via signature storage",
      "Verified data attached to request for downstream routes"
    ],
    "security_features": [
      "Timestamp validation",
      "Replay attack prevention",
      "Signature verification",
      "Address normalization"
    ]
  },
  "docker_configuration": {
    "services": {
      "mongo": {
        "image": "mongo:7",
        "volumes": ["mongo_data:/data/db"],
        "expose": ["27017"]
      },
      "backend": {
        "build": "./backend",
        "container_name": "sljivastore-backend",
        "environment": {
          "MONGO_URL": "mongodb://mongo:27017",
          "MONGO_DB": "nftstore"
        },
        "expose": ["3000"],
        "depends_on": ["mongo"]
      },
      "frontend": {
        "build": "./frontend", 
        "container_name": "sljivastore-frontend",
        "expose": ["3000"],
        "depends_on": ["backend"]
      },
      "nginx": {
        "image": "nginx:latest",
        "container_name": "sljivastore-nginx",
        "ports": ["80:80"],
        "volumes": ["./nginx.conf:/etc/nginx/conf.d/default.conf:ro"],
        "depends_on": ["frontend", "backend"]
      }
    },
    "volumes": {
      "mongo_data": "persistent MongoDB data"
    }
  },
  "backend_structure": {
    "entry_point": "server.js",
    "database_connection": "db.js",
    "routes_directory": "routes/",
    "services_directory": "services/",
    "utils_directory": "utils/",
    "key_files": [
      "server.js - Main server setup with CORS, CSP, routes",
      "db.js - MongoDB connection wrapper",
      "initIndexes.js - Database index initialization",
      "Reservation.js - Reservation model class",
      "cleanup.js - Background cleanup jobs",
      "utils/verifySignature.js - Authentication middleware",
      "utils/hash.js - Object hashing utilities",
      "utils/logger.js - Logging utilities",
      "utils/currency.js - Currency conversion utilities"
    ],
    "background_jobs": [
      "cleanupExpiredReservations (every 30s)",
      "cleanupOldSignatures (every 10min)", 
      "cleanupExpiredGifts (every 10min)"
    ]
  },
  "frontend_structure": {
    "framework": "SvelteKit",
    "build_system": "Vite",
    "styling": "TailwindCSS",
    "key_directories": {
      "src/lib/": "Shared utilities and components",
      "src/routes/": "Page routes",
      "src/types/": "TypeScript definitions"
    },
    "key_files": [
      "src/lib/api.ts - API client wrapper",
      "src/lib/classes.ts - Data model classes",
      "src/lib/types/nft.ts - TypeScript interfaces",
      "src/lib/ethService.ts - Ethereum integration",
      "src/lib/solService.ts - Solana integration",
      "src/lib/walletActions.ts - Wallet management",
      "src/lib/stores/wallet.ts - Wallet state management"
    ],
    "routing_structure": [
      "+layout.svelte - Main layout",
      "+page.svelte - Home page",
      "store/ - Marketplace browsing",
      "listing/[id]/ - Individual listing view",
      "part/[id]/ - Individual part view",
      "partviewer/[type]/[id]/ - Part viewer",
      "createListing/[id]/ - Create listing",
      "createGift/[id]/ - Create gift",
      "createWallet/ - Wallet creation",
      "gifts/ - Gift management",
      "selling/ - Seller dashboard",
      "manage/[id]/ - Listing management",
      "mint/ - NFT minting",
      "login/ - Authentication"
    ]
  },
  "deployment_configuration": {
    "nginx_config": {
      "frontend_proxy": "http://sljivastore-frontend:3000",
      "backend_proxy": "http://sljivastore-backend:3000/api/",
      "domain_restriction": "kodak.beogradfilm.com",
      "security": "Catch-all server returns 444 for unknown hosts"
    },
    "environment_variables": {
      "backend": {
        "NODE_ENV": "production/development",
        "MONGO_URL": "mongodb://mongo:27017",
        "MONGO_DB": "nftstore",
        "PORT": "3000"
      },
      "frontend": {
        "NODE_ENV": "production/development"
      }
    }
  },
  "part_explorer_requirements": {
    "project_name": "Part Explorer",
    "project_short_name": "explorer",
    "purpose": "Browse NFT parts and transactions",
    "sync_method": "Periodic sync with base of this project",
    "deployment": "Separate server with Docker container",
    "database_access": "Local MongoDB instance (same as main project)",
    "project_goals": [
      "Browse NFT parts with comprehensive filtering and search",
      "View complete transaction history for any specific part",
      "View all transactions for any specific user/address",
      "Explore user activity patterns and trading history",
      "Provide detailed analytics on part ownership and transfers",
      "Enable exploration of NFT fragmentation patterns",
      "Track marketplace activity and trends",
      "Support advanced queries across parts, transactions, and users"
    ],
    "key_features": [
      "Read all transactions for specific part",
      "Read all transactions for specific user", 
      "Browse NFT parts with filtering",
      "Transaction history exploration",
      "User activity tracking",
      "Advanced search and filtering capabilities",
      "Analytics dashboard for marketplace insights",
      "Export capabilities for transaction data"
    ],
    "data_focus": [
      "parts collection - main browsing target",
      "partialtransactions - transaction history",
      "transactions - completed transaction records",
      "nfts - NFT metadata for context",
      "listings - current marketplace state"
    ],
    "sync_considerations": [
      "Read-only access to main database",
      "Periodic sync job to update local copy",
      "Handle database schema changes",
      "Maintain data consistency",
      "Performance optimization for read operations",
      "Incremental sync to minimize data transfer",
      "Conflict resolution for concurrent updates",
      "Sync status monitoring and error handling"
    ],
    "user_stories": [
      "As a user, I want to search for specific NFT parts by ID, owner, or NFT",
      "As a user, I want to see the complete transaction history of any part",
      "As a user, I want to view all transactions made by a specific address",
      "As a user, I want to filter parts by ownership status (available/listed/owned)",
      "As a user, I want to see analytics on marketplace activity",
      "As a user, I want to export transaction data for analysis",
      "As a user, I want to track the fragmentation patterns of NFTs",
      "As a user, I want to see trending parts and popular NFTs"
    ]
  },
  "development_patterns": {
    "error_handling": "Try-catch with specific error messages",
    "logging": "Console logging with structured format",
    "validation": "Input validation in services layer",
    "pagination": "Skip/limit pattern for large datasets",
    "address_normalization": "Lowercase ETH addresses",
    "id_generation": "Hash-based IDs for NFTs, ObjectId for others",
    "signature_verification": "Ethereum signature with timestamp validation",
    "database_indexes": "Compound indexes for common query patterns"
  },
  "security_considerations": {
    "cors": "Disabled in production, enabled in development",
    "csp": "Content Security Policy headers",
    "signature_verification": "Ethereum signature validation",
    "replay_protection": "Used signature tracking",
    "timestamp_validation": "5-minute freshness window",
    "admin_restrictions": "Admin-only operations (minting)",
    "input_validation": "Service-level validation",
    "database_indexes": "Performance optimization"
  }
}
